import os

from helpers import *

class CPPWriter:
    def __init__(self, cpp_dir):
        self.include_dir = os.path.join(cpp_dir, "autogenerated/include")
        self.src_dir = os.path.join(cpp_dir, "autogenerated/src")
        self.templates_dir = os.path.join(cpp_dir, "templates")

    def run(self, messages, communication_definitions):
        for message in messages:
            self.write_interface_template(message)
            self.write_message_template(message)
        
        self.write_communications_defintions_template(communication_definitions)
    
    def get_enum_header2(self, enum):
        ret = ""
        for key, value in enum.items():
            ret += f"{key} = {value};\n"

        return ret

    def get_enum_header(self, enum, name):
        ret = f"""enum class {name}
                {{
                    {self.get_enum_header2(enum)}
                }}"""
        return ret
    
    def get_map_header(self, map, name):
        return f"""
                """

    def get_map_source2(self, map):
        ret = ""
        for key, value in map.items():
            if (not is_primitive(key)):
                ret += f"{{TYPE::{key}, {value}}},\n"

        return ret

    def get_map_source(self, map, name):
        return f"""
        const std::map<CommunicationDefinitions::TYPE, int> CommunicationDefinitions::PACKET_SIZES = {{
            {self.get_map_source2(map)}
        }};
                """
    
        
    def write_interface_template(self, message):
        template = open(os.path.join(self.templates_dir, "Packet.Interface.Template.txt")).read()
        
        template = template.replace("[[InterfaceType]]",  message.name + "Interface")
        template = template.replace("[[Requirements]]",self.get_requirements(message, interface=False))
        template = template.replace("[[Variables]]", self.get_variables(message))
        template = template.replace("[[Offsets]]", self.get_offsets(message))

        template = template.replace("[[Type]]", self.get_type(message))
        open(os.path.join(self.include_dir, message.name + "Interface" + ".h"), "w").write(template)

    def write_message_template(self, message):
        template = open(os.path.join(self.templates_dir, "Packet.Template.txt")).read()
        template = template.replace("[[InterfaceType]]", message["@name"] + "Interface")
        template = template.replace("[[MessageType]]", message["@name"])
        template = template.replace("[[Requirements]]",self.get_requirements(message, interface=True))
        template = template.replace("[[Accessors]]", self.get_accessors(message))

        template = template.replace("[[Serializers]]", self.get_serializers(message) + self.get_deserializers(message))

        open(os.path.join(self.include_dir, message["@name"] + ".h"), "w").write(template)

    def write_communications_defintions_template(self, communication_definitions):
        template = open(os.path.join(self.templates_dir, "CommunicationDefinitions.Template.h")).read()
        template = template.replace("[[ENUMS]]", self.get_enum_header(communication_definitions["TYPES"], "TYPE") + "\n" + self.get_enum_header(communication_definitions["IDENTIFIERS"], "IDENTIFIER"))
        template = template.replace("[[MAPS]]", self.get_map_header(communication_definitions["PACKET_SIZES"], "PACKET_SIZES"))
        open(os.path.join(self.include_dir, "CommunicationDefinitions.h"), "w").write(template)

        template = open(os.path.join(self.templates_dir, "CommunicationDefinitions.Template.cpp")).read()
        template = template.replace("[[MAPS]]", self.get_map_source(communication_definitions["PACKET_SIZES"], "PACKET_SIZES"))
        open(os.path.join(self.src_dir, "CommunicationDefinitions.cpp"), "w").write(template)


    