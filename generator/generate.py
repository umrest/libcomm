"""
Generate communication files from xml (WIP)
"""

import xmltodict
import json
import os

def get_list(list_maybe):
    if type(list_maybe) is list:
        return list_maybe
    if list_maybe is None:
        return []
    return [list_maybe]

TYPE_MAP = {
    "uint8": {
        "cpp": "uint8_t",
        "csharp": "byte"
    },
    "int8": {
        "cpp": "int8_t",
        "csharp": "sbyte"
    },
    "int16": {
        "cpp": "int16_t",
        "csharp": "Int16"
    },
    "uint16": {
        "cpp": "uint16_t",
        "csharp": "UInt16"
    },
    "int32": {
        "cpp": "int32_t",
        "csharp": "Int32"
    },
    "uint32": {
        "cpp": "uint32_t",
        "csharp": "UInt32"
    },
    "bytearray": {
        "cpp": "char*"
    }
}

class CPPWriter:
    def __init__(self, cpp_dir):
        self.include_dir = os.path.join(cpp_dir, "autogenerated/include")
        self.src_dir = os.path.join(cpp_dir, "autogenerated/src")

        self.templates_dir = os.path.join(cpp_dir, "Templates")
    
    def get_map_dict(self, pairs):
        pairs = get_list(pairs)
        ret = {}
        for pair in pairs:
            ret[pair["@key"]] = int(pair["@value"])
        
        return ret
    
    def get_enum_dict(self, elements):
        elements = get_list(elements)
        ret = {}
        for element in elements:
            ret[element["@name"]] = int(element["@value"])
        
        return ret


    def get_maps_dict(self, maps):
        maps = get_list(maps)

        for map in maps:
            setattr(self, map["@name"], self.get_map_dict(map["pair"]))
    
    def get_enums_dict(self, enums):
        enums = get_list(enums)

        for enum in enums:
            setattr(self, enum["@name"], self.get_enum_dict(enum["element"]))
        
    def run(self, data):
        self.get_maps_dict(data["maps"]["map"])
        self.get_enums_dict(data["enums"]["enum"])
        self.write_communications_defintions_template(data)
        for message in data["messages"]["message"]:
            self.write_message_template(message)
            self.write_interface_template(message)
    
    def get_setter(self, actual_name, set_postfix, set_custom):
        if not set_custom:
            return f"_{actual_name} = val{set_postfix};"
        else:
            return f"_{actual_name}{set_postfix};"
                
    def get_accessor_str(self, actual_type, accessor_type, name, get_postfix = "", set_postfix = "", actual_name=None, set_custom=False):
        if not actual_name:
            actual_name = name
        return f"""
            {accessor_type} get_{name}(){{
                return _{actual_name}{get_postfix};
            }}
            void set_{name}({accessor_type} val){{
                {self.get_setter(actual_name, set_postfix, set_custom)}
            }}
            """
    
    def get_actual_type(self, a):
        t = TYPE_MAP.get(a, None)
        if t:
            t = t["cpp"]
        else:
            t = a
        return t

    def get_accessor(self, field):
        accessor = field.get("accessor", None)
        accessor_type = self.get_actual_type(field["@type"])
        get_postfix = ""
        set_postfix = ""
        if accessor:
            if accessor["@type"] == "float":
                get_postfix = f" * {accessor['@scale']}"
                set_postfix = f" / {accessor['@scale']}"
                accessor_type = "float"
            if accessor["@type"] == "bits":
                ret = ""
                for idx, bit in enumerate(accessor["bit"]):
                    ret += self.get_accessor_str("bool", "bool", bit, f".GetBit({idx})", f".SetBit({idx}, val)", field["@name"], True)
                return ret

        return self.get_accessor_str(field["@type"], accessor_type, field["@name"], get_postfix, set_postfix)
    
    def get_accessors(self, message):
        data = ""
        fields = message.get("field", [])
        fields = get_list(fields)
        for field in fields:
            data += self.get_accessor(field)

        return data
    
    def get_variable(self, field):
         return f"""{self.get_actual_type(field["@type"])} _{field["@name"]};"""
    
    def get_offset(self, field, off):
        return f"""int {field["@name"]}_OFFSET = {off};
            """
    
    def get_variables(self, message):
        data = ""
        fields = message.get("field", [])
        fields = get_list(fields)
        for field in fields:
            data += self.get_variable(field)
        return data
    
    def get_offsets(self, message):
        data = ""
        offset = 0
        fields = message.get("field", [])
        fields = get_list(fields)
        for field in fields:
            data += self.get_offset(field, offset)
            offset += self.PACKET_SIZES[field["@type"]]
        
        data += f"int SIZE = {self.PACKET_SIZES[message['@name']]};"
        return data
    
    def get_field_serializer2(self, field):
        if field["@type"] not in TYPE_MAP.keys():
            return f"""std::vector<uint8_t> __{field["@name"]} = _{field["@name"]}.Serialize();
                    uint8_t* ___{field["@name"]}= &__{field["@name"]}[0];"""
                
        elif field["@type"] == "bytearray":
            return f"""
            uint8_t* ___{field["@name"]} = (uint8_t*)_{field["@name"]};
            """
        else:
            return f"""
            uint8_t* ___{field["@name"]} = (uint8_t*)&_{field["@name"]};
            """


    def get_field_serializer(self, field):
        return f"""
            {self.get_field_serializer2(field)}
            std::copy(___{field["@name"]}, ___{field["@name"]} + {self.PACKET_SIZES[field["@type"]]}, data.begin() + {field["@name"]}_OFFSET);
            """

    def get_field_deserializer2(self, field):
        if field["@type"] not in TYPE_MAP.keys():
            return f"""
            new_data.clear();
            new_data.resize({self.PACKET_SIZES[field["@type"]]});
            std::copy(data.begin() + {field["@name"]}_OFFSET, data.begin() + {field["@name"]}_OFFSET + {self.PACKET_SIZES[field["@type"]]}, new_data.begin());
            _{field["@name"]}.Deserialize(new_data);
            """
                
        # elif field["@type"] == "bytearray":
        #    return f"""
        #    uint8_t* ___{field["@name"]} = (uint8_t*)_{field["@name"]};
        #    """
        else:
            return f"""
            std::copy(data.begin() + {field["@name"]}_OFFSET, data.begin() + {field["@name"]}_OFFSET + {self.PACKET_SIZES[field["@type"]]}, (uint8_t *)&_{field["@name"]});
            """

    def get_field_deserializer(self, field):
         return f"""
         {self.get_field_deserializer2(field)}"""
    
    def get_serializers(self, message):
        fields = ""
        for field in get_list(message.get("field", None)):
            fields += self.get_field_serializer(field)
        
        data = f"""std::vector<uint8_t> Serialize() {{
                     std::vector<uint8_t> data({self.PACKET_SIZES[message["@name"]]});
                     {fields}
                     return data;
                     }}
                """

        return data

    def get_deserializers(self, message):
        fields = ""
        for field in get_list(message.get("field", None)):
            fields += self.get_field_deserializer(field)
        
        data = f""" void Deserialize(std::vector<uint8_t> data)  {{
            
         std::vector<uint8_t> new_data;
                     {fields}
                     }}
                """
        return data
    
    def get_requirements(self, message=None, data=None, interface=True):
        if not data:     
            data = ""

            data += f'#include "{message["@name"]}{"Interface" if interface else ""}.h"\n'

            types = []
            for field in get_list(message.get("field", None)):
                if field["@type"] not in TYPE_MAP.keys():
                    types.append(field["@type"])
            

            for t in set(types):
                data += f'#include "{t}{"Interface" if interface else ""}.h"\n'

            return data
        return ""
    
    def get_indetifiers(self, data):
        data = ""

        for key, value in self.IDENTIFIERS.items():
            data += f"{key.upper()} = {value},\n"

        return data
    
    def get_types(self, data):
        data = ""

        for key, value in self.TYPE_IDS.items():
            data += f"{key.upper()} = {value},\n"

        return data
    
    def get_packet_sizes(self, data):
        data = ""

        for key, value in self.PACKET_SIZES.items():
            if key in self.TYPE_IDS.keys():
                data += f"{{TYPE::{key.upper()}, {value}}},\n"

        return data
    
    def get_type(self, message):
        if message["@name"] in self.TYPE_IDS.keys():
            return f"""
                CommunicationDefinitions::TYPE type(){{ return CommunicationDefinitions::TYPE::{message["@name"].upper()}; }}
            """
        return ""
    
        
    def write_interface_template(self, message):
        template = open(os.path.join(self.templates_dir, "Packet.Interface.Template.txt")).read()
        
        template = template.replace("[[InterfaceType]]",  message["@name"] + "Interface")
        template = template.replace("[[Requirements]]",self.get_requirements(message, interface=False))
        template = template.replace("[[Variables]]", self.get_variables(message))
        template = template.replace("[[Offsets]]", self.get_offsets(message))

        template = template.replace("[[Type]]", self.get_type(message))
        open(os.path.join(self.include_dir, message["@name"] + "Interface" + ".h"), "w").write(template)

    def write_message_template(self, message):
        template = open(os.path.join(self.templates_dir, "Packet.Template.txt")).read()
        template = template.replace("[[InterfaceType]]", message["@name"] + "Interface")
        template = template.replace("[[MessageType]]", message["@name"])
        template = template.replace("[[Requirements]]",self.get_requirements(message, interface=True))
        template = template.replace("[[Accessors]]", self.get_accessors(message))

        template = template.replace("[[Serializers]]", self.get_serializers(message) + self.get_deserializers(message))

        open(os.path.join(self.include_dir, message["@name"] + ".h"), "w").write(template)

    def write_communications_defintions_template(self, data):
        template = open(os.path.join(self.templates_dir, "CommunicationDefinitions.Template.h")).read()
        template = template.replace("[[TYPES]]", self.get_types(data))
        template = template.replace("[[IDENTIFIERS]]", self.get_indetifiers(data))

        open(os.path.join(self.include_dir, "CommunicationDefinitions.h"), "w").write(template)

        template = open(os.path.join(self.templates_dir, "CommunicationDefinitions.Template.cpp")).read()
        template = template.replace("[[PACKET_SIZES]]", self.get_packet_sizes(data))
        template = template.replace("[[INCLUDE]]", self.get_requirements(data=data, interface=False))
        open(os.path.join(self.src_dir, "CommunicationDefinitions.cpp"), "w").write(template)


    


def main():
    data = open("./comms.xml").read()
    data = xmltodict.parse(data)["xml"]

    data = json.loads((json.dumps(data, indent=4)))


    cpp_dir = os.path.join(os.path.dirname(__file__), "../cpp/")

    CPPWriter(cpp_dir).run(data)


main()